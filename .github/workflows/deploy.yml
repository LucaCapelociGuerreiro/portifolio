# ==============================================================================
# GITHUB ACTIONS CI/CD PIPELINE - PORTFOLIO ORACLE CLOUD
# ==============================================================================
# Pipeline completo de CI/CD para deploy automatizado no Oracle Cloud

name: 'Deploy Portfolio to Oracle Cloud'

# ==============================================================================
# TRIGGERS
# ==============================================================================
on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '.gitignore'
  
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean

# ==============================================================================
# ENVIRONMENT VARIABLES
# ==============================================================================
env:
  NODE_VERSION: '18'
  DOCKER_REGISTRY: 'ghcr.io'
  IMAGE_NAME: 'portfolio-app'
  
  # Server Configuration
  SERVER_HOST: ${{ secrets.ORACLE_SERVER_HOST }}
  SERVER_USER: ${{ secrets.ORACLE_SERVER_USER || 'ubuntu' }}
  SSH_PRIVATE_KEY: ${{ secrets.ORACLE_SSH_PRIVATE_KEY }}
  
  # Application Configuration
  APP_ENV: 'production'
  APP_VERSION: ${{ github.sha }}
  
  # Monitoring
  PROMETHEUS_ENABLED: 'true'
  GRAFANA_ENABLED: 'true'

# ==============================================================================
# PERMISSIONS
# ==============================================================================
permissions:
  contents: read
  packages: write
  security-events: write
  actions: read
  id-token: write

jobs:
  # ==============================================================================
  # ANÁLISE DE CÓDIGO E SEGURANÇA
  # ==============================================================================
  security-scan:
    name: 🔒 Security & Code Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🔍 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 📊 Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: 🛡️ SAST with CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: javascript

    - name: 🔬 Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  # ==============================================================================
  # BUILD E TESTES
  # ==============================================================================
  build-and-test:
    name: 🏗️ Build & Test
    runs-on: ubuntu-latest
    needs: security-scan
    
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: 'portfolio/app/package-lock.json'   # ✅ corrigido

    - name: 📦 Install dependencies
      working-directory: ./portfolio/app
      run: |
        npm ci --legacy-peer-deps
        npm audit --audit-level=high

    - name: 🧪 Run tests
      working-directory: ./portfolio/app
      run: |
        npm run test -- --coverage --watchAll=false
        npm run lint

    - name: 🏗️ Build application
      working-directory: ./portfolio/app
      env:
        NODE_ENV: production
        NEXT_TELEMETRY_DISABLED: 1
        NODE_OPTIONS: '--max-old-space-size=4096'
      run: npm run build

    - name: 📊 Upload coverage reports
      uses: codecov/codecov-action@v4
      if: matrix.node-version == '18'
      with:
        file: ./portfolio/app/coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  # ==============================================================================
  # BUILD DA IMAGEM DOCKER
  # ==============================================================================
  build-docker:
    name: 🐳 Build Docker Image
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    permissions:
      contents: read
      packages: write
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔐 Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🏷️ Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 🏗️ Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ./portfolio/app
        file: ./portfolio/app/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64
        build-args: |
          NODE_ENV=production
          NEXT_TELEMETRY_DISABLED=1

    - name: 🔍 Scan Docker image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ steps.meta.outputs.tags }}
        format: 'sarif'
        output: 'docker-trivy-results.sarif'

    - name: 📊 Upload Docker scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'docker-trivy-results.sarif'

  # ==============================================================================
  # DEPLOY PARA ORACLE CLOUD
  # ==============================================================================
  deploy-oracle:
    name: 🚀 Deploy to Oracle Cloud
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔐 Setup SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.ORACLE_SSH_PRIVATE_KEY }}

    - name: 📋 Add server to known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.ORACLE_SERVER_IP }} >> ~/.ssh/known_hosts

    - name: 🚀 Deploy to Oracle Cloud
      id: deploy
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.ORACLE_SSH_USER }}@${{ secrets.ORACLE_SERVER_IP }} << 'EOF'
          set -e
          
          echo "🔄 Atualizando sistema..."
          sudo apt-get update -qq
          
          echo "🐳 Verificando Docker..."
          if ! command -v docker &> /dev/null; then
            echo "📦 Instalando Docker..."
            curl -fsSL https://get.docker.com -o get-docker.sh
            sudo sh get-docker.sh
            sudo usermod -aG docker $USER
          fi
          
          if ! command -v docker-compose &> /dev/null; then
            echo "📦 Instalando Docker Compose..."
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          fi
          
          echo "🔐 Login no GitHub Container Registry..."
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          echo "📁 Preparando diretório de deploy..."
          mkdir -p ~/portfolio-deploy
          cd ~/portfolio-deploy
          
          echo "📥 Baixando arquivos de configuração..."
          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               -H "Accept: application/vnd.github.v3.raw" \
               -o docker-compose.yml \
               "https://api.github.com/repos/${{ github.repository }}/contents/portfolio/app/docker-compose.yml"
          
          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               -H "Accept: application/vnd.github.v3.raw" \
               -o nginx.conf \
               "https://api.github.com/repos/${{ github.repository }}/contents/portfolio/app/nginx.conf"
          
          echo "🛑 Parando containers antigos..."
          docker-compose down --remove-orphans || true
          
          echo "🧹 Limpando imagens antigas..."
          docker system prune -f
          docker image prune -a -f
          
          echo "📥 Baixando nova imagem..."
          docker pull ${{ needs.build-docker.outputs.image-tag }}
          
          echo "🔄 Atualizando docker-compose.yml com nova imagem..."
          sed -i "s|image: .*|image: ${{ needs.build-docker.outputs.image-tag }}|g" docker-compose.yml
          
          echo "🚀 Iniciando novos containers..."
          docker-compose up -d --force-recreate
          
          echo "⏳ Aguardando containers ficarem saudáveis..."
          timeout 300 bash -c 'until docker-compose ps | grep -q "healthy"; do sleep 5; done'
          
          echo "✅ Deploy concluído com sucesso!"
          
          echo "🔍 Verificando saúde da aplicação..."
          curl -f http://localhost:80 > /dev/null
          
          echo "📊 Status dos containers:"
          docker-compose ps
          
          echo "💾 Uso de recursos:"
          docker stats --no-stream
        EOF
        
        echo "url=http://${{ secrets.ORACLE_SERVER_IP }}" >> $GITHUB_OUTPUT

    - name: 🔍 Health Check
      run: |
        echo "🏥 Verificando saúde da aplicação..."
        for i in {1..10}; do
          if curl -f http://${{ secrets.ORACLE_SERVER_IP }} > /dev/null 2>&1; then
            echo "✅ Aplicação está saudável!"
            exit 0
          fi
          echo "⏳ Tentativa $i/10 - aguardando aplicação..."
          sleep 30
        done
        echo "❌ Aplicação não respondeu após 5 minutos"
        exit 1

    - name: 📊 Post-Deploy Monitoring
      if: always()
      run: |
        echo "📈 Coletando métricas pós-deploy..."
        ssh ${{ secrets.ORACLE_SSH_USER }}@${{ secrets.ORACLE_SERVER_IP }} << 'EOF'
          echo "=== MÉTRICAS DO SISTEMA ==="
          echo "CPU e Memória:"
          top -bn1 | head -5
          echo ""
          echo "Uso de disco:"
          df -h
          echo ""
          echo "Containers em execução:"
          docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
          echo ""
          echo "Logs recentes da aplicação:"
          docker-compose logs --tail=20 app
        EOF

  # ==============================================================================
  # NOTIFICAÇÕES
  # ==============================================================================
  notify:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [deploy-oracle]
    if: always()
    
    steps:
    - name: 📧 Notify Success
      if: needs.deploy-oracle.result == 'success'
      run: |
        echo "✅ Deploy realizado com sucesso!"
        echo "🌐 URL: http://${{ secrets.ORACLE_SERVER_IP }}"
        echo "📊 Commit: ${{ github.sha }}"
        echo "👤 Autor: ${{ github.actor }}"
    
    - name: 🚨 Notify Failure
      if: needs.deploy-oracle.result == 'failure'
      run: |
        echo "❌ Deploy falhou!"
        echo "📊 Commit: ${{ github.sha }}"
        echo "👤 Autor: ${{ github.actor }}"
        echo "🔗 Logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
