name: 'CI/CD - Deploy Oracle Cloud'

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read
  packages: write   # ✅ Necessário para push no GHCR
  id-token: write

env:
  IMAGE_NAME: 'meu-app'
  REGISTRY: 'ghcr.io'
  APP_PORT: 80

jobs:
  # ============================================
  # BUILD & PUSH DOCKER IMAGE
  # ============================================
  build-and-push:
    name: 🏗️ Build & Push Docker Image
    runs-on: ubuntu-latest
    
    steps:
      - name: 🛠️ Checkout do Código
        uses: actions/checkout@v4

      - name: 🔐 Login no GHCR
        run: |
          echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u "${{ secrets.GHCR_USER }}" --password-stdin

      - name: 🐳 Build e Push da Imagem
        run: |
          IMAGE_TAG=${{ github.sha }}
          IMAGE_URI=${{ env.REGISTRY }}/${{ secrets.GHCR_USER }}/${{ env.IMAGE_NAME }}:$IMAGE_TAG
          
          echo "📦 Construindo imagem $IMAGE_URI..."
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI
          
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

  # ============================================
  # DEPLOY NA ORACLE CLOUD
  # ============================================
  deploy:
    name: 🚀 Deploy para Oracle Cloud
    runs-on: ubuntu-latest
    needs: build-and-push
    
    steps:
      - name: 📦 Deploy via SSH
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.ORACLE_SERVER_IP }}
          username: ${{ secrets.ORACLE_SSH_USER }}
          key: ${{ secrets.ORACLE_SSH_PRIVATE_KEY }}
          script: |
            set -e
            IMAGE_NAME=${{ env.IMAGE_NAME }}
            IMAGE_TAG=${{ github.sha }}
            IMAGE_URI=${{ env.REGISTRY }}/${{ secrets.GHCR_USER }}/$IMAGE_NAME:$IMAGE_TAG

            echo "🔄 Atualizando sistema..."
            sudo apt-get update -qq

            echo "🐳 Verificando Docker..."
            if ! command -v docker &> /dev/null; then
              echo "📦 Instalando Docker..."
              curl -fsSL https://get.docker.com -o get-docker.sh
              sudo sh get-docker.sh
              sudo usermod -aG docker $USER
            fi

            echo "🔐 Login no GitHub Container Registry..."
            echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u "${{ secrets.GHCR_USER }}" --password-stdin

            echo "📥 Baixando nova imagem: $IMAGE_URI"
            docker pull $IMAGE_URI

            echo "🏷️ Tagging como latest..."
            docker tag $IMAGE_URI ${{ env.REGISTRY }}/${{ secrets.GHCR_USER }}/$IMAGE_NAME:latest

            echo "🛑 Parando container antigo..."
            docker stop $IMAGE_NAME || true
            docker rm $IMAGE_NAME || true

            echo "🚀 Iniciando novo container..."
            docker run -d --name $IMAGE_NAME -p 80:80 ${{ env.REGISTRY }}/${{ secrets.GHCR_USER }}/$IMAGE_NAME:latest

            echo "🏥 Checando saúde da aplicação..."
            for i in {1..10}; do
              if curl -sSf http://localhost:${APP_PORT} > /dev/null; then
                echo "✅ Aplicação respondeu corretamente!"
                exit 0
              fi
              echo "⏳ Tentativa $i/10 - aguardando aplicação..."
              sleep 10
            done

            echo "❌ Nova versão falhou! Tentando rollback..."
            docker stop $IMAGE_NAME || true
            docker rm $IMAGE_NAME || true

            if docker images | grep "backup-$IMAGE_NAME:latest"; then
              echo "⬅️ Fazendo rollback para a última versão estável..."
              docker run -d --name $IMAGE_NAME -p 80:80 "backup-$IMAGE_NAME:latest"
            else
              echo "⚠️ Nenhuma imagem anterior encontrada para rollback."
            fi

            exit 1

  # ============================================
  # NOTIFICAÇÕES
  # ============================================
  notify:
    name: 📢 Notificações
    runs-on: ubuntu-latest
    needs: deploy
    if: always()

    steps:
      - name: ✅ Sucesso
        if: needs.deploy.result == 'success'
        run: |
          echo "✅ Deploy realizado com sucesso!"
          echo "🌐 URL: http://${{ secrets.ORACLE_SERVER_IP }}"
          echo "📊 Commit: ${{ github.sha }}"
          echo "👤 Autor: ${{ github.actor }}"

      - name: 🚨 Falha
        if: needs.deploy.result == 'failure'
        run: |
          echo "❌ Deploy falhou!"
          echo "📊 Commit: ${{ github.sha }}"
          echo "👤 Autor: ${{ github.actor }}"
          echo "🔗 Ver logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
