# ==============================================================================
# DOCKERFILE ULTRA-OTIMIZADO PARA ORACLE CLOUD - LUCA CAPELOCI
# ==============================================================================
# Multi-stage build otimizado para reduzir uso de CPU/RAM
# Compat√≠vel com Oracle Cloud Always Free Tier

# Stage 1: Depend√™ncias com otimiza√ß√µes avan√ßadas
FROM node:18-alpine AS deps

# Instalar apenas o essencial e limpar cache
RUN apk add --no-cache libc6-compat curl && \
    rm -rf /var/cache/apk/*

WORKDIR /app

# Configura√ß√µes globais do npm para acelerar instala√ß√£o
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

# Copiar apenas os arquivos de depend√™ncias para aproveitar o cache
COPY package*.json .npmrc ./  

# Criar .npmrc otimizado para acelerar instala√ß√£o
RUN echo "registry=https://registry.npmjs.org/\nfetch-timeout=300000\nfetch-retry-mintimeout=20000\nfetch-retry-maxtimeout=120000\nnetwork-concurrency=8\ncache-min=3600\nprefer-offline=true\nfund=false\naudit=false" > .npmrc

# Instalar apenas depend√™ncias de produ√ß√£o com otimiza√ß√µes avan√ßadas
RUN npm ci --omit=dev --no-audit --no-fund --prefer-offline --no-progress --legacy-peer-deps && \
    npm cache clean --force && \
    rm -rf /root/.npm

# ==============================================================================
# Stage 2: Build otimizado com limita√ß√£o de mem√≥ria
FROM node:18-alpine AS builder
WORKDIR /app

# Configurar vari√°veis de ambiente para build otimizado
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV NODE_OPTIONS="--max-old-space-size=1024"

# Copiar apenas arquivos essenciais primeiro para melhorar cache
# üî• Removido o jsconfig.json (que n√£o existe no reposit√≥rio)
COPY next.config.js tsconfig.json ./
COPY public ./public
COPY src ./src

# Copiar depend√™ncias do stage anterior
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Build com configura√ß√µes de mem√≥ria limitada e otimiza√ß√µes de performance
RUN NODE_ENV=production NEXT_TELEMETRY_DISABLED=1 npm run build:fast -- --no-lint && \
    find .next \( -name "*.map" -o -name "*.d.ts" \) -type f -delete

# ==============================================================================
# Stage 3: Runtime ultra-leve com Alpine m√≠nimo
FROM node:18-alpine AS runner
WORKDIR /app

# Instalar apenas o essencial para produ√ß√£o e limpar cache
RUN apk add --no-cache curl && \
    rm -rf /var/cache/apk/* /tmp/*

# Configura√ß√µes de seguran√ßa e performance
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV NODE_OPTIONS="--max-old-space-size=256 --no-warnings --enable-source-maps=false"
ENV PORT=3000

# Criar usu√°rio n√£o-root para seguran√ßa
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs

# Copiar apenas arquivos necess√°rios para produ√ß√£o
COPY --from=builder /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

# Configurar usu√°rio
USER nextjs

# Expor porta
EXPOSE 3000

# Health check otimizado
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://127.0.0.1:3000 || exit 1

# Comando otimizado para produ√ß√£o
CMD ["node", "server.js"]
