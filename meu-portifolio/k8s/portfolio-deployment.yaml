# KUBERNETES DEPLOYMENT ULTRA-OTIMIZADO - ANALISTA DEVOPS SÊNIOR
# ==============================================================================
# Configurações com limitações rigorosas de recursos para Oracle Cloud
# Compatível com Oracle Kubernetes Engine (OKE) e Always Free Tier

apiVersion: apps/v1
kind: Deployment
metadata:
  name: portfolio-app
  namespace: default
  labels:
    app: portfolio
    version: v1
    tier: frontend
  annotations:
    deployment.kubernetes.io/revision: "1"
    kubernetes.io/change-cause: "DevOps optimization with resource limits"
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: portfolio
  template:
    metadata:
      labels:
        app: portfolio
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/api/health"
    spec:
      # Configurações de segurança
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      
      # Configurações de DNS
      dnsPolicy: ClusterFirst
      
      # Tolerâncias para nodes
      tolerations:
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      
      containers:
      - name: portfolio-app
        image: portfolio:latest
        imagePullPolicy: Always
        
        # LIMITAÇÕES CRÍTICAS DE RECURSOS
        resources:
          limits:
            # Máximo 400MB RAM por pod
            memory: "400Mi"
            # Máximo 0.5 CPU por pod
            cpu: "500m"
            # Limite de armazenamento efêmero
            ephemeral-storage: "1Gi"
          requests:
            # Mínimo garantido
            memory: "200Mi"
            cpu: "250m"
            ephemeral-storage: "500Mi"
        
        # Configurações de porta
        ports:
        - containerPort: 3000
          name: http
          protocol: TCP
        
        # Variáveis de ambiente otimizadas
        env:
        - name: NODE_ENV
          value: "production"
        - name: NEXT_TELEMETRY_DISABLED
          value: "1"
        - name: NODE_OPTIONS
          value: "--max-old-space-size=256"
        - name: PORT
          value: "3000"
        - name: HOSTNAME
          value: "0.0.0.0"
        
        # Health checks otimizados
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        
        # Startup probe para aplicações que demoram para iniciar
        startupProbe:
          httpGet:
            path: /api/health
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 10
        
        # Configurações de segurança do container
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 1001
          capabilities:
            drop:
            - ALL
        
        # Volumes para cache
        volumeMounts:
        - name: tmp-volume
          mountPath: /tmp
        - name: cache-volume
          mountPath: /app/.next/cache
      
      # Volumes
      volumes:
      - name: tmp-volume
        emptyDir:
          sizeLimit: 100Mi
      - name: cache-volume
        emptyDir:
          sizeLimit: 200Mi
      
      # Configurações de scheduling
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - portfolio
              topologyKey: kubernetes.io/hostname

---
# SERVICE PARA EXPOSIÇÃO DA APLICAÇÃO
apiVersion: v1
kind: Service
metadata:
  name: portfolio-service
  namespace: default
  labels:
    app: portfolio
  annotations:
    service.beta.kubernetes.io/oci-load-balancer-shape: "flexible"
    service.beta.kubernetes.io/oci-load-balancer-shape-flex-min: "10"
    service.beta.kubernetes.io/oci-load-balancer-shape-flex-max: "100"
spec:
  type: LoadBalancer
  selector:
    app: portfolio
  ports:
  - port: 80
    targetPort: 3000
    protocol: TCP
    name: http
  sessionAffinity: None

---
# HORIZONTAL POD AUTOSCALER
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: portfolio-hpa
  namespace: default
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: portfolio-app
  minReplicas: 2
  maxReplicas: 4
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60

---
# POD DISRUPTION BUDGET
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: portfolio-pdb
  namespace: default
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: portfolio