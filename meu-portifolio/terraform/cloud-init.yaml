#cloud-config
# ==============================================================================
# CLOUD-INIT CONFIGURATION - ORACLE CLOUD INSTANCE
# ==============================================================================
# Configuração automática do servidor Oracle Cloud
# Analista DevOps Sênior - Automação de Infraestrutura

# Atualizar pacotes na inicialização
package_update: true
package_upgrade: true

# Pacotes a serem instalados
packages:
  - curl
  - wget
  - git
  - htop
  - vim
  - unzip
  - jq
  - tree
  - net-tools
  - firewalld
  - fail2ban
  - logrotate
  - cron
  - rsync
  - ca-certificates
  - gnupg
  - lsb-release

# Configurações do sistema
system_info:
  default_user:
    name: opc
    groups: [wheel, docker]
    sudo: ["ALL=(ALL) NOPASSWD:ALL"]
    shell: /bin/bash

# Configurar timezone
timezone: America/Sao_Paulo

# Configurar locale
locale: en_US.UTF-8

# Scripts a serem executados
runcmd:
  # ==============================================================================
  # CONFIGURAÇÃO INICIAL DO SISTEMA
  # ==============================================================================
  
  # Configurar hostname
  - hostnamectl set-hostname portfolio-server
  - echo "127.0.0.1 portfolio-server" >> /etc/hosts
  
  # Configurar firewall
  - systemctl enable firewalld
  - systemctl start firewalld
  - firewall-cmd --permanent --add-service=ssh
  - firewall-cmd --permanent --add-service=http
  - firewall-cmd --permanent --add-service=https
  - firewall-cmd --permanent --add-port=3000/tcp
  - firewall-cmd --permanent --add-port=9090/tcp
  - firewall-cmd --permanent --add-port=3001/tcp
  - firewall-cmd --permanent --add-port=9100/tcp
  - firewall-cmd --reload
  
  # Configurar fail2ban
  - systemctl enable fail2ban
  - systemctl start fail2ban
  
  # ==============================================================================
  # INSTALAÇÃO DO DOCKER
  # ==============================================================================
  
  # Remover versões antigas do Docker
  - yum remove -y docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-engine
  
  # Adicionar repositório Docker
  - yum install -y yum-utils
  - yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
  
  # Instalar Docker
  - yum install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
  
  # Iniciar e habilitar Docker
  - systemctl enable docker
  - systemctl start docker
  
  # Adicionar usuário opc ao grupo docker
  - usermod -aG docker opc
  
  # Instalar Docker Compose standalone
  - curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
  - chmod +x /usr/local/bin/docker-compose
  - ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
  
  # ==============================================================================
  # CONFIGURAÇÃO DE MONITORAMENTO
  # ==============================================================================
  
  # Criar diretórios para monitoramento
  - mkdir -p /opt/monitoring/{prometheus,grafana,node-exporter}
  - chown -R opc:opc /opt/monitoring
  
  # Instalar Node Exporter
  - |
    cd /tmp
    wget https://github.com/prometheus/node_exporter/releases/latest/download/node_exporter-1.6.1.linux-amd64.tar.gz
    tar xvfz node_exporter-1.6.1.linux-amd64.tar.gz
    cp node_exporter-1.6.1.linux-amd64/node_exporter /usr/local/bin/
    chmod +x /usr/local/bin/node_exporter
    rm -rf node_exporter-1.6.1.linux-amd64*
  
  # ==============================================================================
  # CONFIGURAÇÃO DE SEGURANÇA
  # ==============================================================================
  
  # Configurar SSH mais seguro
  - sed -i 's/#PermitRootLogin yes/PermitRootLogin no/' /etc/ssh/sshd_config
  - sed -i 's/#PasswordAuthentication yes/PasswordAuthentication no/' /etc/ssh/sshd_config
  - sed -i 's/#PubkeyAuthentication yes/PubkeyAuthentication yes/' /etc/ssh/sshd_config
  - systemctl restart sshd
  
  # Configurar limites do sistema
  - echo "* soft nofile 65536" >> /etc/security/limits.conf
  - echo "* hard nofile 65536" >> /etc/security/limits.conf
  - echo "* soft nproc 32768" >> /etc/security/limits.conf
  - echo "* hard nproc 32768" >> /etc/security/limits.conf
  
  # Otimizações do kernel
  - echo "vm.max_map_count=262144" >> /etc/sysctl.conf
  - echo "net.core.somaxconn=65535" >> /etc/sysctl.conf
  - echo "net.ipv4.tcp_max_syn_backlog=65535" >> /etc/sysctl.conf
  - sysctl -p
  
  # ==============================================================================
  # CONFIGURAÇÃO DE LOGS
  # ==============================================================================
  
  # Configurar logrotate para Docker
  - |
    cat > /etc/logrotate.d/docker << 'EOF'
    /var/lib/docker/containers/*/*.log {
      rotate 7
      daily
      compress
      size=1M
      missingok
      delaycompress
      copytruncate
    }
    EOF
  
  # ==============================================================================
  # PREPARAÇÃO PARA DEPLOY
  # ==============================================================================
  
  # Criar diretório para deploy
  - mkdir -p /home/opc/portfolio-deploy
  - chown -R opc:opc /home/opc/portfolio-deploy
  
  # Criar script de health check
  - |
    cat > /home/opc/health-check.sh << 'EOF'
    #!/bin/bash
    # Health check script para a aplicação
    
    APP_URL="http://localhost:80"
    MAX_RETRIES=5
    RETRY_INTERVAL=10
    
    for i in $(seq 1 $MAX_RETRIES); do
        if curl -f $APP_URL > /dev/null 2>&1; then
            echo "$(date): Aplicação está saudável"
            exit 0
        else
            echo "$(date): Tentativa $i/$MAX_RETRIES falhou, aguardando $RETRY_INTERVAL segundos..."
            sleep $RETRY_INTERVAL
        fi
    done
    
    echo "$(date): Aplicação não está respondendo após $MAX_RETRIES tentativas"
    exit 1
    EOF
  
  - chmod +x /home/opc/health-check.sh
  - chown opc:opc /home/opc/health-check.sh
  
  # Criar script de backup
  - |
    cat > /home/opc/backup.sh << 'EOF'
    #!/bin/bash
    # Script de backup para a aplicação
    
    BACKUP_DIR="/home/opc/backups"
    DATE=$(date +%Y%m%d_%H%M%S)
    APP_DIR="/home/opc/portfolio-deploy"
    
    mkdir -p $BACKUP_DIR
    
    # Backup dos dados da aplicação
    if [ -d "$APP_DIR" ]; then
        tar -czf "$BACKUP_DIR/portfolio_backup_$DATE.tar.gz" -C "$APP_DIR" .
        echo "$(date): Backup criado: portfolio_backup_$DATE.tar.gz"
    fi
    
    # Backup dos volumes Docker
    docker run --rm -v portfolio_app_data:/data -v $BACKUP_DIR:/backup alpine tar -czf /backup/docker_volumes_$DATE.tar.gz -C /data .
    
    # Limpar backups antigos (manter apenas os últimos 7 dias)
    find $BACKUP_DIR -name "*.tar.gz" -mtime +7 -delete
    
    echo "$(date): Backup concluído"
    EOF
  
  - chmod +x /home/opc/backup.sh
  - chown opc:opc /home/opc/backup.sh
  
  # Configurar cron para backup diário
  - echo "0 2 * * * /home/opc/backup.sh >> /var/log/backup.log 2>&1" | crontab -u opc -
  
  # ==============================================================================
  # CONFIGURAÇÃO DE MONITORAMENTO COM SYSTEMD
  # ==============================================================================
  
  # Criar serviço systemd para Node Exporter
  - |
    cat > /etc/systemd/system/node-exporter.service << 'EOF'
    [Unit]
    Description=Node Exporter
    Wants=network-online.target
    After=network-online.target
    
    [Service]
    User=opc
    Group=opc
    Type=simple
    ExecStart=/usr/local/bin/node_exporter --web.listen-address=:9100
    Restart=always
    RestartSec=3
    
    [Install]
    WantedBy=multi-user.target
    EOF
  
  - systemctl daemon-reload
  - systemctl enable node-exporter
  - systemctl start node-exporter
  
  # ==============================================================================
  # CONFIGURAÇÕES FINAIS
  # ==============================================================================
  
  # Criar arquivo de informações do sistema
  - |
    cat > /home/opc/system-info.txt << 'EOF'
    ===========================================
    PORTFOLIO SERVER - ORACLE CLOUD
    ===========================================
    
    Servidor configurado automaticamente via Terraform + Cloud-Init
    
    Serviços instalados:
    - Docker & Docker Compose
    - Node Exporter (porta 9100)
    - Firewall configurado
    - Fail2ban ativo
    - Backup automático (diário às 2h)
    
    Diretórios importantes:
    - /home/opc/portfolio-deploy (aplicação)
    - /home/opc/backups (backups)
    - /opt/monitoring (monitoramento)
    
    Scripts úteis:
    - /home/opc/health-check.sh
    - /home/opc/backup.sh
    
    Logs importantes:
    - /var/log/cloud-init.log
    - /var/log/cloud-init-output.log
    - /var/log/backup.log
    
    Para verificar status dos serviços:
    - systemctl status docker
    - systemctl status node-exporter
    - systemctl status firewalld
    - systemctl status fail2ban
    
    ===========================================
    EOF
  
  - chown opc:opc /home/opc/system-info.txt
  
  # Configurar motd
  - |
    cat > /etc/motd << 'EOF'
    
    ██████╗  ██████╗ ██████╗ ████████╗███████╗ ██████╗ ██╗     ██╗ ██████╗ 
    ██╔══██╗██╔═══██╗██╔══██╗╚══██╔══╝██╔════╝██╔═══██╗██║     ██║██╔═══██╗
    ██████╔╝██║   ██║██████╔╝   ██║   █████╗  ██║   ██║██║     ██║██║   ██║
    ██╔═══╝ ██║   ██║██╔══██╗   ██║   ██╔══╝  ██║   ██║██║     ██║██║   ██║
    ██║     ╚██████╔╝██║  ██║   ██║   ██║     ╚██████╔╝███████╗██║╚██████╔╝
    ╚═╝      ╚═════╝ ╚═╝  ╚═╝   ╚═╝   ╚═╝      ╚═════╝ ╚══════╝╚═╝ ╚═════╝ 
    
    🚀 Oracle Cloud - Portfolio Server
    📊 Monitoramento: Node Exporter ativo na porta 9100
    🐳 Docker: Pronto para deploy
    🔒 Segurança: Firewall + Fail2ban ativos
    💾 Backup: Automático diário às 2h
    
    📋 Para informações do sistema: cat ~/system-info.txt
    🔍 Para verificar saúde: ~/health-check.sh
    
    EOF
  
  # Reiniciar serviços necessários
  - systemctl restart rsyslog
  - systemctl restart cron
  
  # Log de conclusão
  - echo "$(date): Cloud-init configuration completed successfully" >> /var/log/cloud-init-custom.log

# Arquivos a serem criados
write_files:
  # Configuração do fail2ban para SSH
  - path: /etc/fail2ban/jail.local
    content: |
      [DEFAULT]
      bantime = 3600
      findtime = 600
      maxretry = 3
      
      [sshd]
      enabled = true
      port = ssh
      logpath = /var/log/secure
      maxretry = 3
      bantime = 3600
    owner: root:root
    permissions: '0644'
  
  # Configuração personalizada do Docker daemon
  - path: /etc/docker/daemon.json
    content: |
      {
        "log-driver": "json-file",
        "log-opts": {
          "max-size": "10m",
          "max-file": "3"
        },
        "storage-driver": "overlay2",
        "live-restore": true,
        "userland-proxy": false,
        "experimental": false,
        "metrics-addr": "127.0.0.1:9323",
        "experimental": true
      }
    owner: root:root
    permissions: '0644'
  
  # Script de monitoramento de recursos
  - path: /home/opc/monitor-resources.sh
    content: |
      #!/bin/bash
      # Script de monitoramento de recursos do sistema
      
      echo "=== MONITORAMENTO DE RECURSOS - $(date) ==="
      echo
      
      echo "CPU Usage:"
      top -bn1 | grep "Cpu(s)" | awk '{print $2 + $4"%"}'
      echo
      
      echo "Memory Usage:"
      free -h
      echo
      
      echo "Disk Usage:"
      df -h
      echo
      
      echo "Docker Containers:"
      docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
      echo
      
      echo "Docker Images:"
      docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}"
      echo
      
      echo "Network Connections:"
      netstat -tuln | grep LISTEN
      echo
      
      echo "System Load:"
      uptime
      echo
    owner: opc:opc
    permissions: '0755'

# Configurações finais
final_message: |
  ========================================
  🎉 ORACLE CLOUD SERVER READY! 🎉
  ========================================
  
  ✅ Sistema configurado com sucesso
  ✅ Docker instalado e configurado
  ✅ Monitoramento ativo
  ✅ Segurança configurada
  ✅ Backup automático configurado
  
  🚀 Servidor pronto para deploy!
  
  Próximos passos:
  1. Configure os secrets no GitHub Actions
  2. Execute o pipeline de deploy
  3. Acesse a aplicação via IP público
  
  ========================================

# Reinicializar após configuração
power_state:
  mode: reboot
  message: "Reiniciando após configuração inicial"
  timeout: 30
  condition: true